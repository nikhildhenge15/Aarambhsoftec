document.addEventListener('DOMContentLoaded', function() {
    setupSidebarButtons();
});

function setupSidebarButtons() {
    document.getElementById('addConsumerBtn').addEventListener('click', showAddConsumer);
    document.getElementById('addBillBtn').addEventListener('click', showAddBill);
    document.getElementById('billingHistoryBtn').addEventListener('click', showBillingHistory);
    document.getElementById('viewConsumersBtn').addEventListener('click', showViewConsumers);
    document.getElementById('dashboardBtn').addEventListener('click', showDashboard);
    document.getElementById('viewConsumerBillBtn').addEventListener('click', showViewConsumerBill);
}

let bluetoothDevice = null;
let printerCharacteristic = null;

// ЁЯУМ **рдмреНрд▓реВрдЯреВрде рдкреНрд░рд┐рдВрдЯрд░ рд╢реЛрдзрд╛ рдЖрдгрд┐ рдХрдиреЗрдХреНрдЯ рдХрд░рд╛**
async function connectBluetoothPrinter() {
    try {
        console.log("ЁЯФН Searching for Bluetooth Printer...");
        bluetoothDevice = await navigator.bluetooth.requestDevice({
            acceptAllDevices: true,
            optionalServices: ['000018f0-0000-1000-8000-00805f9b34fb']
        });

        console.log("ЁЯФЧ Connecting to Printer...");
        const server = await bluetoothDevice.gatt.connect();
        const service = await server.getPrimaryService('000018f0-0000-1000-8000-00805f9b34fb');
        printerCharacteristic = await service.getCharacteristic('00002af1-0000-1000-8000-00805f9b34fb');

        alert("тЬЕ Printer Connected Successfully!");
    } catch (error) {
        console.error("тЭМ Printer Connection Error:", error);
        alert("тЭМ рдкреНрд░рд┐рдВрдЯрд░ рдХрдиреЗрдХреНрдЯ рд╣реЛрдд рдирд╛рд╣реА! рдХреГрдкрдпрд╛ рдмреНрд▓реВрдЯреВрде рдЪрд╛рд▓реВ рдЖрд╣реЗ рдХрд╛ рддреЗ рддрдкрд╛рд╕рд╛.");
    }
}

// ЁЯУМ **рдмрд┐рд▓ рдкреНрд░рд┐рдВрдЯ рдХрд░рд╛**
async function printBill() {
    if (!printerCharacteristic) {
        alert("тЭМ Printer is not connected! Please connect first.");
        return;
    }

    try {
        const encoder = new TextEncoder();
        const text = "ЁЯФ╣ Water Billing System ЁЯФ╣\n--------------------------------\nConsumer Name: Test User\nMeter No: 123456\nPrevious Reading: 100\nCurrent Reading: 120\nTotal Bill: тВ╣260.00\n--------------------------------\n";
        const data = encoder.encode('\x1B\x40' + text + '\n\x1D\x56\x00');

        await printerCharacteristic.writeValue(data);
        alert("тЬЕ Bill Printed Successfully!");
    } catch (error) {
        console.error("тЭМ Print Error:", error);
        alert("тЭМ Printing Failed! Printer рдХрдиреЗрдХреНрд╢рди рдкреБрдиреНрд╣рд╛ рддрдкрд╛рд╕рд╛.");
    }
}
